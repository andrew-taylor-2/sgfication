Algorithm outline    
    0.5 (if I were aiming to do this with physical board pictures, i would find corners and do affine transform)
    1. find intersections
    2. see if there are adjacent intersections in either direction (remember that go board is often not same height/width)
    3.1 if adj. int. in both directions, get spacing in both directions
    3.2 if adj. int. in one direction, get spacing in that direction. then look at spacing of non-adjacent intersections in the other direction. 
        you can use the fact that the true intersection spacing in this direction will be close to the spacing in the other direction, while the intersection 
        spacing of any two given non-adjacent intersections will be an integer multiple of the true int. spacing
    4.1 now detect circles, find mode of radius, this is piece size. 
    4.2 might have to k-meansa and choose the larger circle size, since the "glint" on the stones also looks like a circle
    5. rescale piece images to this size (best way will be to hough circle piece images (ahead of time) and use the ratio to resize)
    6. match pieces with known piece images (this part might not be necessary (but it's also what I have right now))
    7. Fill in every board space that you can (noise should be nearly as regular as signal. Also board edge will be spaced wrong; and once you 
        have a full board with good matches you can disregard outside)

Details
1. find intersections:
    find edges
    find lines 

5/30 thoughts:
need to turn the render by 90 degrees
screenshot is very sensitive to window being too small
i'd love to do this without assets

5/19 thoughts:
If i just add the actual SGFication of the board representation to the backend, I have nearly the full service. Then i can
    make the upload button work and render it on the board i already have.

5/10 thoughts:
I implemented most of my 5/1 thoughts. woo

I think I should rename sgfication/sgfication to sgfication/core for clarity. This will require changes across many files.

Need to do more extensive testing. even unit testing. 

I should implement some sort of backend with SQL just for learning purposes

5/1 thoughts: 
I need to refactor some functions to take img objects rather than paths. 

Need to use unicorn to test out whether my fastapi stuff is working

then need to dockerize it all 

maybe i could use decorators to have some of my functions take in file names or image objects? is that a good idea

old-new thoughts:

It's time to use assets to drag me across the finish line. Corner screenshots included, probably

could make a script that will crop a piece/intersection screenshot optimally. maybe by iteratively cropping then convolving and
    looking at peak/total values?

Also, I need a function that takes our proposed intersections, circles, maybe corners, and gets the board location from this
    This includes filtering out out of bounds false positives.

should dockerize it

I think it's best if all the functions just take in image arrays rather than filenames, i should refactor

matplotlib might not need to be a dependency

old thoughts:

Maybe to get all intersections, i could get image of intersections (probably could utilize spacing knowledge), then average them. Then match template with board.
    But do i have a fix for the fact that some intersections aren't plus shaped? can I transform this average into a corner image?

Some of my functions with several arbitrary parameters could benefit from a parameter exploration mechanism

I can probably reuse my intersection code to find corners by seeing if endpoints match

Older thoughts:

Okay I need to deal with scaling.  probably the best idea is to detect piece size with hough circles (find mode bc there will be noise). 
    rescale my piece images based on this (i will hough circle them and then just resize based on the ratio of these). I don't think there will be 
    any way to avoid detecting empty intersections as well. basically to detect the scale of the whole thing, I'll need to look at adjacent objects of the same type 
    basically i'll type it out simply below

olderer thoughts:

Is there any situation in which i would need to check for scaling? Dang I think there is lol
    Honestly, probably the best way to account for this is to start reconstructing the grid before finding the pieces.
    Since the grid lines seem easy to detect? And they could give you the spacing which would give you the approximate piece sizing
    One other idea is to convolve the board with cropped version of itself? and the peaks in the convolution should be spaced evenly

I could AI generate boards for website, then identify those positions. Or if embedding that is too hard, I could mass make them on my own comp and allow site 
    visitors to try out some












Random: i could get AI to randomly generate go board positions, then SGF them